WildWestOutlaw class

Instance Variables:
    private String name - this variable represents the name of the character the user controls
    private int health - this variable represents the health of the character the user controls
    private int maxHealth - this variable represents the max health of the character the user controls
    private int money - this variable represents the money of the character the user controls
    private int honor - this variable represents how honorable the character the user controls is
    private int day - this variable represents the current day
    private int dayCounter - this variable represents the value of a counter which is used to determine when to increase the day
    private int peopleSaved - this variable represents how many gang members have been saved
    private boolean gameOver - this variable represents if the game should end or not
    private int damage - this variable represents the current damage the user does
    private String itemsBought - this variable represents all the items the user has already bought so that they are not
                                 charged multiple times, it starts empty and is added on to when items are purchased
    private String bountyInfo - this variable represents all the information about bounties that needs to be checked
                                such as if they are executed and if the user has already paid for a certain bounty

Constructors:
    public WildWestOutlaw(String userName)
        The constructor will take userName and assign it to the instance variable name. It will then assign a default value to the variable health, maxHealth, money, honor,
        day, dayCounter, peopleSaved, and gameOver. All "member saved" variables and "bought" variables will be set to false.

    public WildWestOutlaw()
        The constructor will assign a default value to the variable name, health, maxHealth, money, honor, day, dayCounter, peopleSaved, and gameOver. All "member saved"
        variables and "bought" variables will be set to false.

Methods:
    public boolean isInputNumerical(String input)
        This method will determine if the input the user gives is numerical or not using a try catch block

    public String getHelp()
        This method will print a string informing the user of what can be done in the game to get them started.

    public boolean isGameOver()
        The method returns if the game is over or not.

    public int getDay()
        The method returns the current day.

    public String getName()
        The method returns the name of the character.

    public void increaseDay()
        The method increases the value of day by one if dayCounter is even and then increases dayCounter by 1.

    public String getStats()
        The method returns the current stats of the character. These stats include health, maxHealth, money, honor, damage, and saved.

    public void changeHonor(int change)
        The method adds the value of change to the current value of honor. If honor goes below -100 it is set to -100. If honor goes above 100 it is set to 100.

    public String fightEnemy(String name, int enemyHealth, int enemyDamage)
        The method takes the name, health, and damage the enemy does from what is inputted, and simulates a battle between the character and the current enemy. The
        results of the battle are added to a variable as a string and then the variable is returned.

    public String fightGroup(int groupSize)
         The method has a while loop that runs groupSize amount of times. Each iteration will select a random enemy for the character to fight and will then simulate the fight
         using the fightEnemy() method. Each string returned from the fightEnemy() method is added to a variable which is then returned once each battle has finished. If the user runs
         out of health, an ending is printed, the battles stop early, the game ends, and the program ends.

    public String robStageCoach()
        The method will use Math.random() to determine how easily the user robs a stagecoach and how many people the user will fight. The money gotten
        from the robbery is added to the money variable and information about the crime is returned as string. Fights are simulated using the fightGroup() method. Crime will
        decrease honor. An image of a stagecoach will be printed.

    public String robTrain(String time)
        The method will use time to determine if the user finds a train. On the train, Math.random() will be used to determine how many people the user will fight and how
        much money is found. The money gotten from the robbery is added to the money variable and information about the crime is returned as string. Fights are simulated
        using the fightGroup() method. Crime will decrease honor. An image of a train will be printed.

    public String robBank(String time)
        The method will use time to determine if the user goes to the bank when it's open and will affect how many people the user needs to fight. Math.random() will also be
        used to determine how many people the user will fight and how much money is found. The money gotten from the robbery is added to the money variable and information
        about the crime is returned as string. Fights are simulated using the fightGroup() method. Crime will decrease honor. An image of some gold will be printed.

    public String commitCrime(int choice, String time)
        This method will take choice, which will determine which crime the user wants to do, and time, to see what time the user will do the crime. The three
        crimes consist of robbing a stagecoach, robbing a train, and robbing a bank. A string containing the results of the crime chosen will be returned with the results of
        the appropriate method.

    public String giveHint()
        The method will use Math.random() to choose a random hint in a list of 5 and will then return the hint as a string

    public String giveARide()
        The method will use Math.random() to determine if the user finds someone to help. Then Math.random() will be used to determine which of three outcomes will
        occur, they thank you and giveHint() is run, they rob a certain percentage of your money, they try to steal your horse and you both start fighting. The results of
        this will be added to a variable as a string and then returned. Honor will increase.

    public boolean isDonatePossible(int donation)
        The method will take an integer donation, which is the donation the user is trying to make, and then will check if it is possible with their current amount of money.
        If it is possible, the variable money will be updated accordingly.

    public String donateMoney(int donation)
        The method will check the donation is possible using isDonatePossible(). If it is not the user will be informed, otherwise a certain amount of honor will be granted
        to the user depending on how much money they decide to donate. There is a small chance before the user can leave they will receive a hint using the giveHint() method. The
        results of everything will be added to a variable and returned.

    public String stopAFight()
        The method will use Math.random() to determine the outcome of the user stopping a fight. These outcomes include both walking away upset, you saving one man from the other and getting
        a hint which will be given using the giveHint() method, or both men deciding to fight you instead which will run the fightGroup() method. This will increase honor. The results
        are returned in a string.

    public void doAGoodDeed(int choice, int donation)
        This method will take an int, choice, which will determine which good deed the user wants to do. The three good deeds consist of giving someone a ride
        home, intervening in a fight, and giving money to the poor. If they decide to donate to the poor, the variable donation will dictate how much they donate.

    public String useItem(int price, String statAffected, int change, String itemName)
        The method will inform the user if they lack the money needed to pay for the item. If they can pay for the item, statAffected will be used to determine which
        stat will get affected, itemName and change will be used to determine how much the stat that is affected will change. The item name will be added to itemsBought if needed.
        If the item has already been bought you are not charged. The results are returned as a string in a variable.

    public String buyItem(String choice)
        The method will take the variable choice, and then run the correct version of the method useItem() and then return the results of this as a string.

    public String showBountyList()
        This method will return the bounty list. This list is updated if a bounty is bought or a person has been executed.

    public String payBounty(int price, String memberName, int gainedHonor)
        This method checks if the user has already paid a certain bounty or if the member has been executed and if so that is returned as a string. If they cannot afford
        the bounty that information is returned to the user. If the user can pay for the bounty, they gain gainedHonor amount of honor and price amount of money is removed
        from their money. Then the member whose bounty is now paid is stored in bountyInfo.

    public String chooseBounty(int choice)
        This method will run the correct version of the payBounty() method based on the choice of the user, it will return information about their choice.

    public String executionCheck()
        This method will check the day the game is on and will return a string about the execution of a certain member based on if the correct day has been reached.
        bountyInfo will be updated to reflect the execution of a member and stop the player from buying their bounty anyways.

    public String toString()
        This method will print once the game has ended and will compare the user's stats to my best stats so they can have a comparison

    public String endGame(String endCondition)
        The method will return a string which has details containing the ending of the game. The ending which is selected and displayed will be determined by how many
        members the user has saved and their honor. If the user dies in battle that is shown instead, if the user decides to end the game early the method will be run.
        The method knows whether to show the died in battle ending or a normal one using endCondition.


Images class
- This class has an empty constructor that serves no purpose
- It is made of methods that do nothing besides return ASCII images, Strings, so they do not clutter up my actual code
- The methods are
    - getCatalogueImage
    - getJailImage
    - getRobStageCoachImage
    - getRobTrainImage
    - getRobBankImage
    - getGiveARideImage
    - getGiveARideImage2
    - getDonateMoneyImage
    - getStopAFightImage

WildWestOutlawRunner class
Step 1: An object of the Scanner class will be made to get user input
Step 2: An object of the WildWestOutlaw class will be made using the name entered by the user
Step 3: A while loop will be made and will continue to iterate until the user is dead, ends early, or finishes the game
Step 4: In the while loop the user will be prompted to enter an input which will be saved as variable action
Step 5: Based on the variable action more information may be asked and gotten through user input
Step 6: The day counter is increased if the user decides to commit a crime or do a good deed
Step 7: The appropriate method of OutlawRedemption will run based on the user input
Step 8: increaseDay() is run which action the user decided on
Step 9: if the day reaches 20, endGame() is run and the loop ends
Step 10: executionCheck() is run to display execution information if needed
